name: Deploy Image and Force ECS Deploy

on:
  push:
    branches:
      - CI

jobs:
  build-deploy-image:
    runs-on: ubuntu-latest
    environment: aws
    
    env:
      BRANCH: "main" 
      ENVIRONMENT: "prod"
      VERSION: "latest"
      AWS_DEFAULT_REGION: "us-east-1"
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_SESSION_TOKEN: ${{ secrets.AWS_SESSION_TOKEN }}
      AWS_BUCKET_NAME_TERRAFORM_STATE: ${{ secrets.S3_TERRAFORM_STATE_NAME }}
      AWS_ECR_URL: "516697223383.dkr.ecr.us-east-1.amazonaws.com"
      AWS_DYNAMODB_NAME: ${{ secrets.DYNAMODB_TERRAFORM_LOCK_NAME }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Create and Deploy Image to ECR
        run: |
          cd LendARead2-AWS/terraform/modules/main
          aws ecr get-login-password --region ${AWS_DEFAULT_REGION} | docker login --username AWS --password-stdin ${AWS_ECR_URL}
          docker build --build-arg BRANCH_NAME=${BRANCH} -t ${AWS_ECR_URL}/lendaread_ecr_region:${VERSION} .
          docker push ${AWS_ECR_URL}/lendaread_ecr_region:${VERSION}

      - name: Retrieve ECS Cluster and Service Names
        id: state
        run: |
          aws s3 cp s3://${AWS_BUCKET_NAME_TERRAFORM_STATE}/${ENVIRONMENT}/terraform.tfstate terraform.tfstate
          ECS_CLUSTER_NAME=$(jq -r '.resources[] | select(.type == "aws_ecs_cluster") | .instances[0].attributes.name' terraform.tfstate)
          ECS_SERVICE_NAME=$(jq -r '.resources[] | select(.type == "aws_ecs_service") | .instances[0].attributes.name' terraform.tfstate)
          TASK_DEFINITION_ARN=$(jq -r '.resources[] | select(.type == "aws_ecs_task_definition") | .instances[0].attributes.arn' terraform.tfstate)
          echo "ECS_CLUSTER_NAME=${ECS_CLUSTER_NAME}" >> $GITHUB_ENV
          echo "ECS_SERVICE_NAME=${ECS_SERVICE_NAME}" >> $GITHUB_ENV
          echo "TASK_DEFINITION_ARN=${TASK_DEFINITION_ARN}" >> $GITHUB_ENV

      - name: Describe task definition
        id: describe-task-def
        run: |
          TASK_FAMILY=$(echo $TASK_DEFINITION_ARN | cut -d '/' -f 2 | cut -d ':' -f 1)
          echo "TASK_FAMILY=${TASK_FAMILY}" >> $GITHUB_ENV
          aws ecs describe-task-definition --task-definition ${TASK_DEFINITION_ARN} > current-task-def.json

      - name: Register new task definition revision
        id: new-task-def
        run: |
          NEW_TASK_DEF=$(jq --arg IMAGE "${AWS_ECR_URL}/lendaread_ecr_region:${VERSION}" '.taskDefinition | .containerDefinitions[0].image = $IMAGE' current-task-def.json)
          NEW_TASK_DEF=$(echo $NEW_TASK_DEF | jq 'del(.taskDefinitionArn, .revision, .status, .registeredAt, .registeredBy, .compatibilities, .requiresAttributes)')
          echo "${NEW_TASK_DEF}" > new-task-def.json
          NEW_TASK_DEF_ARN=$(aws ecs register-task-definition --cli-input-json file://new-task-def.json --query 'taskDefinition.taskDefinitionArn' --output text)
          echo "NEW_TASK_DEF_ARN=${NEW_TASK_DEF_ARN}" >> $GITHUB_ENV

      - name: Update ECS Service
        run: |
          aws ecs update-service --cluster ${ECS_CLUSTER_NAME} --service ${ECS_SERVICE_NAME} --task-definition ${NEW_TASK_DEF_ARN} --force-new-deployment

